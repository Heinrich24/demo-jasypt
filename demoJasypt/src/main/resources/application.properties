# A simple guide on how to encrypt sensitive information in a .properties file.
#
#
# Define a variable you would like to encrypt eg. 
#
# spring.password=DEC(MySenstiveInformationHere)
#
# Naviagte to the parent pom file of the your project and proceed to run the following command
# mvn jasypt:encrypt -Djasypt.encryptor.password=dummyKey
#
# Running the above mentioned mvn command will search your application.properties file for 
# references to DEC() and proceed to encrypt everything within the () with the 
# -Djasypt.encryptor.password that you specified. In this case it will be dummyKey.
#
#
# This will change the following:
# spring.password=DEC(MySenstiveInformationHere)
# to
# spring.password=ENC(AgOVq/XinWM7YL9hi07XNkF3lDlexAzMOEb99wIv4prGtBaKrBIRuQEyVCHAMWH+)
# 
# TA-DA you spring.password is now encrypted with the password "dummyKey"
#
#
# Okey, so now when you want to run you java application you need to tell you java
# application via the command line what the password is, so that it can use the values
# which have been encrypted. Otherwise you will get all kinds of authentication issues.
# You do this with the running the following command:
# 
# java -Djasypt.encryptor.password=dummyKey
#
# Now you should be able to run you java application with encrypted values. Also you java application
# now knows what the values is at runtime.






spring.username=ENC(y0LPKLl2g7aN+erbScVMln/0YwRns2YagJIeQjsbHUKmA1KkWU1RyuWIDWvKOZUb)
spring.password=ENC(AgOVq/XinWM7YL9hi07XNkF3lDlexAzMOEb99wIv4prGtBaKrBIRuQEyVCHAMWH+)
